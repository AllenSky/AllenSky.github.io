---
layout: post
title: why your draw calls are not batched
description: "why your draw calls are not batched"
tags: [draw call Unity]
---

----------------------
### How to see why your draw calls are not batched in 5.6

Fortunately, Unity 5.6 adds a new feature to the Frame Debugger which says exactly why Unity started a new batch.

很幸运的是，Unity5.6添加了一个Frame Debugger的新功能，它能准确地说明为什么Unity开始一个新的batch。

Before digging deeper into cases when Unity starts a new batch, let’s talk about what batches and batching are.

在开始深挖何时Unity开始一个新的batch，我们先聊聊什么是batch和batching。

![Smaller icon](http://awalife.top/images/13/image02_3.png)

### Batch

To draw an object on screen in your game Unity needs to issue a “Draw” command to the graphics API. This action is essentially called a “Draw Call”. But before doing this, Unity also needs to set all the GPU states required to draw this object: mesh, shader, textures, blending settings and other shader properties. State change commands plus one or more draw commands is what we call a Batch.

在游戏场景里绘制一个物体，Unity需要发起一个“Draw” 的图形API命令。这个动作大体上被叫做“Draw Call”。但在开始绘制物体之前，Unity仍需要设置所有的GPU状态：mesh, shader, textures, blending settings和其他shader属性。状态改变命令加上一个或多个绘制命令，这被我们称为一个Batch。

### Batching

What makes a batch slow is the GPU state change commands, while draw commands are actually pretty cheap. This is why Unity tries to pack several objects being rendered using the same GPU state into one batch. This process is called Batching.

GPU状态改变命令会导致batch执行缓慢，而绘制命令消耗实际非常廉价。这就是为啥Unity尝试把相同的GPU状态的几个物体打包渲染成一个batch。这个过程被叫做Batching。

Unity has three types of batching: static batching, dynamic batching and GPU instancing. 

- [Static batching](https://docs.unity3d.com/Manual/DrawCallBatching.html) combines static meshes in one or more large meshes at build time and at run time renders them as one batch per mesh. 
- [Dynamic batching](https://docs.unity3d.com/Manual/DrawCallBatching.html) takes several small meshes each frame, transforms their vertices on the CPU, groups many similar vertices together, and draws them all in one go.
- [GPU instancing](https://docs.unity3d.com/Manual/GPUInstancing.html) (added in Unity 5.4) draws many identical objects with different positions, rotations, and other shader properties in fewer draw calls.

Unity有下面三种类型的batching：静态batching，动态batching和GPU instancing。

- 静态batching   在编译时期合并多个静态mesh为一个大的mesh，在运行时就可在一个batch中渲染。
- 动态batching   每帧把多个小mesh，由CPU计算顶点位移，把类似顶点合并为一组，在一次中绘制完成
- GPU instancing    （Unity5.4中添加）用更少的draw call绘制多个相同的物体，但它们的位置，旋转和shader其他属性却不同。

### Draw call batching

To draw a GameObject on the screen, the engine has to issue a draw call to the graphics API (such as OpenGL or Direct3D). Draw calls are often resource-intensive, with the graphics API doing significant work for every draw call, causing performance overhead on the CPU side. This is mostly caused by the state changes done between the draw calls (such as switching to a different Material), which causes resource-intensive validation and translation steps in the graphics driver.

Unity uses two techniques to address this:

- **Dynamic batching**: for small enough Meshes, this transforms their vertices on the CPU, groups many similar vertices together, and draws them all in one go.
- **Static batching**: combines static (not moving) GameObjects into big Meshes, and renders them in a faster way.

Built-in batching has several benefits compared to manually merging GameObjects together; most notably, GameObjects can still be culled individually. However, it also has some downsides; static batching incurs memory and storage overhead, and dynamic batching incurs some CPU overhead.

在游戏场景里绘制一个物体，Unity需要发起一个“Draw” 的图形API命令。Draw Calls 通常资源密集的，每次绘制时通过图形API完成繁重的工作，导致CPU端的性能开销大。大部分原因是在不同的Draw Calls之间（如切换不同的材质球）状态切换产生的，这导致了资源密集的验证和在图形驱动传输。

unity使用下面两种技术来解决这个问题：

- 动态batching：对于足够小的meshes，CPU计算顶点位移，把相似顶点的合并成组，然后在一次draw call中完成绘制。
- 静态batching：合并多个静态（不能移动）的物体为大的mesh，从而用更快的速度渲染。

内建的batching相比于手动合并物体，有许多好处。尤其是，使用内建batching的物体可仍然使用独立剔除功能。但是，它也有一些坏处，静态batching导致内存和存储空间的开销，动态batching导致了CPU的开销。

### Material set-up for batching — 为batching准备好材质

Only GameObjects sharing the same Material can be batched together. Therefore, if you want to achieve good batching, you should aim to share Materials among as many different GameObjects as possible.

If you have two identical Materials which differ only in Texture, you can combine those Textures into a single big Texture. This process is often called Texture atlasing (see the Wikipedia page on [Texture atlases](http://en.wikipedia.org/wiki/Texture_atlas) for more information). Once Textures are in the same atlas, you can use a single Material instead.

If you need to access shared Material properties from the scripts, then it is important to note that modifying [Renderer.material](https://docs.unity3d.com/ScriptReference/Renderer-material.html) creates a copy of the Material. Instead, use [Renderer.sharedMaterial](https://docs.unity3d.com/ScriptReference/Renderer-sharedMaterial.html) to keep Materials shared.

Shadow casters can often be batched together while rendering, even if their Materials are different. Shadow casters in Unity can use dynamic batching even with different Materials, as long as the values in the Materials needed by the shadow pass are the same. For example, many crates could use Materials with different Textures on them, but for the shadow caster rendering the textures are not relevant, so in this case they can be batched together.

只有共享相同的材质的物体才能batch到一起。因此，如果你想要达到好的batching效果，你必须有目的的在不同物体之间尽可能的共享材质。

如果你有两个相同的材质，唯独贴图不同，你可以把多个贴图合并为一个大的贴图。这个过程被称为Texture atalsing。一旦多个贴图躲在一个图集里，那你就可以用单独的材质了。

如果你需要在代码中访问材质的属性，需谨记修改Renderer.material会创建一个新的材质。对应的，使用Renderer.sharedMaterial确保材质共享。

阴影生成器通常都在渲染时合并batch，即使它们的材质不同。即使材质不同，阴影生成器能使用动态batching技术，只要材质中的shadow pass中的属性值一样。举例，许多木箱使用了不同贴图的材质，但是在阴影渲染时，贴图不一样也没关系，所以它们能被batch。



## Dynamic batching — 动态batching

Unity can automatically batch moving GameObjects into the same draw call if they share the same Material and fulfill other criteria. Dynamic batching is done automatically and does not require any additional effort on your side.

Unity可以自动的能移动的物体，如果它们共享相同的材质和满足其他标准（下面提到），合并到相同的draw call中完成。动态batching是自动完成的，不需要开发者额外的努力。

- Batching dynamic GameObjects has certain overhead per vertex, so batching is applied only to Meshes containing fewer than 900 vertex attributes in total.
  - If your Shader is using Vertex Position, Normal and single UV, then you can batch up to 300 verts, while if your Shader is using Vertex Position, Normal, UV0, UV1 and Tangent, then only 180 verts.
  - **Note**: attribute count limit might be changed in future.
- GameObjects are not batched if they contain mirroring on the transform (for example GameObject A with +1 scale and GameObject B with –1 scale cannot be batched together).
- Using different Material instances causes GameObjects not to batch together, even if they are essentially the same. The exception is shadow caster rendering.
- GameObjects with lightmaps have additional renderer parameters: lightmap index and offset/scale into the lightmap. Generally, dynamic lightmapped GameObjects should point to exactly the same lightmap location to be batched.
- Multi-pass Shaders break batching.
  - Almost all Unity Shaders support several Lights in forward rendering, effectively doing additional passes for them. The draw calls for “additional per-pixel lights” are not batched.
  - The Legacy Deferred (light pre-pass) rendering path has dynamic batching disabled, because it has to draw GameObjects twice.
- batching动态物体对每个顶点会有一定的消耗，所以batching只有在Mesh少于900个顶点属性的时候才能有效。
  - 如果你的shader使用了顶点位置，法线和一个UV，你能batch300个顶点。但如果你的shader使用了顶点位置，法线，两个UV和切线，那最多只能有180个顶点。
  - 注意：将来可能会修改属性数量的限制
- 如有缩放镜像的物体，则不能被atch。（比如物体A是+1缩放而物体B时-1缩放）
- 使用了不同材质实例的物体不能被batch，哪怕是相同的材质。阴影发生器例外
- 带光照贴图的物体会有额外的渲染参数：光照贴图索引，偏移和缩放，这些参数会存储在光照贴图中。通常，动态光照物体需要有完全相同的光照位置，才能被batch。
- 带多个pass的shader会破坏batch
  - 几乎所有的Unity shader支持光照前渲染，都是通过额外pass完成。有额外的逐像素光照的不能被batch。
  - 遗留延迟渲染（光照预处理）会关闭动态batch，因为会绘制物体两次。

Because it works by transforming all GameObject vertices into world space on the CPU, it is only an advantage if that work is smaller than doing a draw call. The resource requirements of a draw call depends on many factors, primarily the graphics API used. For example, on consoles or modern APIs like Apple Metal, the draw call overhead is generally much lower, and often dynamic batching cannot be an advantage at all.

因为batching操作需要变换所有的物体顶点到世界坐标，只有计算量小于多一次draw call才有用。一次draw call的资源需求量依赖很多因素，主要是使用的图形API。比如，在主机或现代API（比如苹果的Metal），draw call的开销通常很低，所以动态batching很可能没有效果。

## Static batching — 静态batching

Static batching allows the engine to reduce draw calls for geometry of any size provided it shares the same material, and does not move. It is often more efficient than dynamic batching (it does not transform vertices on the CPU), but it uses more memory. 

静态batching允许引擎减少draw call，不论任何大小的，相同材质的，不可移动的几何体。通常比动态batching更有效率（因为无需CPU的顶点计算），但使用更多的内存。

In order to take advantage of static batching, you need to explicitly specify that certain GameObjects are static and do not move, rotate or scale in the game. To do so, mark GameObjects as static using the **Static** checkbox in the Inspector:

![img](https://docs.unity3d.com/uploads/Main/StaticTagInspector.png)

为了能够使用静态batching的好处，你需要明确的指出特定物体是静态的，不可移动，旋转或缩放。在Inspector标记物体为**Static**。

Using static batching requires additional memory for storing the combined geometry. If several GameObjects shared the same geometry before static batching, then a copy of geometry is created for each GameObject, either in the Editor or at runtime. This might not always be a good idea; sometimes you have to sacrifice rendering performance by avoiding static batching for some GameObjects to keep a smaller memory footprint. For example, marking trees as static in a dense forest level can have serious memory impact.

使用静态batching需要额外的内存去存储合并的几何信息。如果几个共享相同几何图元的物体使用了静态batching，那么对每个物体都会创建一个图元拷贝，无论是在编辑器还是运行时。这很可能不是一个好的想法，有时你必须牺牲渲染性能去避免使用静态batching从而保证较低的内存使用。比如，标记浓密森林的树木为**Stactic**可能带来严重的内存影响。

Internally, static batching works by transforming the static GameObjects into world space and building a big vertex and index buffer for them. Then, for visible GameObjects in the same batch, a series of simple draw calls are done, with almost no state changes in between. Technically it does not save 3D API draw calls, but it saves on state changes between them (which is the resource-intensive part). Batches are limited to 64k vertices and 64k indices on most platforms (48k indices on OpenGLES, 32k indices on macOS).

在内部，静态batching通过变换所有静态物体到世界坐标，建立一个大的顶点和索引buffer。然后，在一个相同的batching中，对可见物体完成一连串简单绘制操作，中间没有状态的变换。严格的说，没有节省3D API的调用，但是却节省了状态变换（资源密集部分）。Batch在大部分平台被限制在了64K顶点和64K索引（OPENGL ES使用48K索引，在MacOS上使用32K索引）

## Tips — 提示

Currently, only [Mesh Renderers](https://docs.unity3d.com/Manual/class-MeshRenderer.html), [Trail Renderers](https://docs.unity3d.com/Manual/class-TrailRenderer.html), [Line Renderers](https://docs.unity3d.com/Manual/class-LineRenderer.html), [Particle Systems](https://docs.unity3d.com/Manual/class-ParticleSystem.html) and [Sprite Renderers](https://docs.unity3d.com/Manual/class-SpriteRenderer.html) are batched. This means that skinned Meshes, Cloth, and other types of rendering components are not batched.

当前，只有Mesh Renderers，Trail Renderer，Line Renderer，粒子系统和精灵渲染会被batch。这意味着，皮肤，衣服和其他类型的渲染组件不会被batch。

Semi-transparent Shaders usually require GameObjects to be rendered in back-to-front order for transparency to work. Unity first orders GameObjects in this order, and then tries to batch them, but because the order must be strictly satisfied, this often means less batching can be achieved than with opaque GameObjects.

半透明shader通常要求物体渲染的顺序是从后往前的。Unity优先按照此顺序来排序物体，然后尝试batch。但是因为渲染顺序必须被严格满足，这意味着比不透明物体有更少的batching。

Manually combining GameObjects that are close to each other can be a very good alternative to draw call batching. For example, a static cupboard with lots of drawers often makes sense to just combine into a single Mesh, either in a 3D modeling application or using [Mesh.CombineMeshes](https://docs.unity3d.com/ScriptReference/Mesh.CombineMeshes.html).

手动合并相近的物体是一个很好的选择。比如，有过个抽屉的静态橱柜通常合并为一个mesh是好想法，要么通过3D软件要么使用Mesh.CombineMeshes方法。

### GPU instancing

You can use GPU instancing to draw many identical objects with only a few draw calls. There are some restrictions that you need to bear in mind:

- Your identical objects need to share the same Mesh and the same Material. You can, however, add per-instance data. See [Adding per-instance data](https://docs.unity3d.com/Manual/#AddingPerInstanceData) below for more information.
- The MeshRenderer component and Graphics.DrawMesh API are supported.
- GPU instancing is available on the following platforms:
  - Windows: DX11 and DX12 with SM 4.0 and above / OpenGL 4.1 and above
  - OS X and Linux: OpenGL 4.1 and above
  - Mobile: OpenGL ES 3.0 and above / Metal
  - PlayStation 4
  - Xbox One

使用GPU instancing，只需要很少的draw call就能绘制许多相同的物体。你必须在脑子里有这些限制：

- 相同物体需要共享同样的mesh和相同的材质。但是，你可以给每个实例添加数据。

- 支持MeshRenderer组件和Graphics.DrawMesh API。

  ​