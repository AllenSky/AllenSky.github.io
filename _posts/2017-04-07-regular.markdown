正则表达式

我看过最好的学习正则的书籍是：《Mastering Regular Expressions - Understand Your Data and Be More Productive》。接下来就是我的读书笔记。

--------

1. 字符组-character class

   通常也称为正则表达式结构体。不妨把字符组看成是独立的微型语言。字符组里的元字符和外部的含义不一样。

   举例说明：gr[ae]y

   先找到g，接着是r，然后是一个a或e，最后是y。这里隐含了两个意思：

   - 在字符组意外的普通字符里，都有“**接下来是（and then）**”的意思。
   - 字符组内部正好相反，是“**或**”的意思

​        补充， 例如：q[ ^u] , 不能匹配Iraq

​        字符组需要最少比配一个字符。

2. 多选结构（Alternation）

   用“|”来分隔。虽然多选结构和字符组在很多情况下含义相同。

   但是多选结构的每个分部都能是一个完整的正则表达式，而字符组则是匹配单个字符。

3. 单词分界符 （Word Boundaries)

   某些grep支持“*元字符序列*”（metasequences），即"\\<" 和 "\\>"。"<"和">"本身不是元数据，只有加上“\\”才是。举例说明：\\<cat 和 cat\\> 是分别为以cat开头的单词和以cat结尾的单词。

4. 可选字符（Optional Items）

   元字符“?”代表可选项，它在一个字符后面，就表示此处容许出现这个字符，不过它的出现并非必要条件。它仅作用于之前紧邻的元素。

   举例说明：July|Jul

   在用可选字符的方式上为：July?

   又或者4th|4

   在用可选字符的方式上为：4(th)?

5. 量词（重复出现）- Quantifiers：Repetetion

   "+"和"*"，以及上面第4点的“?”都是量词（quantifiers）。元字符“+”表示“之前紧邻的元素出现一次或多次”，而"\*"表示“之前紧邻的元素出现任意多次，或者不出现”。换种说法就是“\*”表示“匹配尽可能多的次数，如果实在无法匹配，也不要紧”。而“+”表示“匹配尽可能多的次数，但如果一次也匹配不上，则报告失败”。

   ​